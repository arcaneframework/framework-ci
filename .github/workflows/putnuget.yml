name: putnuget
on:
  workflow_dispatch:

jobs:
  job:
    runs-on: ${{ matrix.os }}
  
    name: ${{ matrix.os }}-test-ci
  
    env:
      VCPKG_BINARY_SOURCES: 'clear;nuget,GitHub,readwrite'
      BUILD_COMMANDS_ROOT: ${{ github.workspace }}/_build
      VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/builddir/vcpkg_archives
      MY_VCPKG_INSTALLED_DIR: ${{ github.workspace }}/vcpkg/installed
      VCPKG_DISABLE_METRICS: 1
      VCPKG_BUILD_DIR: '${{ github.workspace }}/vcpkg'
      VCPKG_PUSH_HASH_PACKAGE_NAME: '1.0.1-${{ matrix.os }}-${{ matrix.triplet }}'
      VCPKG_INSTALL_HASH_PACKAGE_NAME: '1.0.0-${{ matrix.os }}-${{ matrix.triplet }}'

    strategy:
      matrix:
        os: ['windows-2019', 'ubuntu-20.04']
        include:
          - os: 'windows-2019'
            triplet: x64-windows
            nugetexe: nuget.exe
            mono: ''
          - os: 'ubuntu-20.04'
            triplet: 'x64-linux'
            nugetexe: /usr/local/bin/nuget.exe
            # To run `nuget.exe` on non-Windows platforms, we must use `mono`.
            mono: 'mono'

    steps:
      - name: Checkout actions
        uses: actions/checkout@v2
        with:
          submodules: true

      - uses: lukka/get-cmake@latest

      - name: download and install msmpi 10.0
        if: matrix.os == 'windows-2019'
        shell: cmd
        run: |
          ${{ env.BUILD_COMMANDS_ROOT }}\download_mswin_10.bat

      - name: Get Nuget (ubuntu)
        if: matrix.os == 'ubuntu-20.04'
        run: |
          sudo curl -o /usr/local/bin/nuget.exe https://dist.nuget.org/win-x86-commandline/latest/nuget.exe

      - name: 'Setup NuGet Credentials'
        shell: 'bash'
        run: >
          ${{ matrix.mono }} ${{ matrix.nugetexe }}
          sources add
          -source "https://nuget.pkg.github.com/arcaneframework/index.json"
          -storepasswordincleartext
          -name "GitHub"
          -username "arcaneframework"
          -password "${{ secrets.GITHUB_TOKEN }}"

      - name: 'Untar vcpkg bootstrap cache'
        shell: 'bash'
        continue-on-error: true
        run: |
          cmake -DHASH_PACKAGE_NAME="${{ env.VCPKG_INSTALL_HASH_PACKAGE_NAME }}" -DVCPKG_BUILD_DIR='${{ env.VCPKG_BUILD_DIR }}' -P '${{ env.BUILD_COMMANDS_ROOT }}/vcpkg_cache/DoUntar.cmake'

      - name: bootstrap vcpkg (ubuntu)
        if: matrix.os == 'ubuntu-20.04'
        run: |
          mkdir -p "${{ env.VCPKG_DEFAULT_BINARY_CACHE }}"
          ./vcpkg/bootstrap-vcpkg.sh

      - name: Install mono (ubuntu)
        if: matrix.os == 'ubuntu-20.04'
        run: |
          sudo apt install -y mono-complete

      - name: bootstrap vcpkg (windows)
        if: matrix.os == 'windows-2019'
        run: |
          mkdir -p "${{ env.VCPKG_DEFAULT_BINARY_CACHE }}"
          ./vcpkg/bootstrap-vcpkg.bat


#      - uses: actions/download-artifact@v2
#        continue-on-error: true
#        with:
#          name: vcpkg-packages-${{ matrix.os }}
#          path: ${{ env.MY_VCPKG_INSTALLED_DIR }}

      - name: 'vcpkg package restore'
        shell: 'bash'
        run: >
          vcpkg/vcpkg --debug install sqlite3 --triplet ${{ matrix.triplet }}

      - name: 'Create nuget package for vcpkg installed packages'
        shell: 'bash'
        continue-on-error: true
        run: |
          cmake -DHASH_PACKAGE_NAME="${{ env.VCPKG_PUSH_HASH_PACKAGE_NAME }}" -DVCPKG_BUILD_DIR='${{ env.VCPKG_BUILD_DIR }}' -P '${{ env.BUILD_COMMANDS_ROOT }}/vcpkg_cache/DoTar.cmake'

#          vcpkg/vcpkg --debug install sqlite3 glib libxml2 mpi parmetis hypre --triplet ${{ matrix.triplet }}

#      - uses: actions/upload-artifact@v2
#        with:
#          name: vcpkg-packages-${{ matrix.os }}
#          path: ${{ env.MY_VCPKG_INSTALLED_DIR }}