name: putnuget
on:
  workflow_dispatch:

jobs:
  job:
    runs-on: ${{ matrix.os }}
  
    name: ${{ matrix.os }}-test-ci
  
    env:
      VCPKG_BINARY_SOURCES: 'clear;nuget,GitHub,readwrite'
      BUILD_COMMANDS_ROOT: ${{ github.workspace }}/_build
      VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/builddir/vcpkg_archives
      MY_VCPKG_INSTALLED_DIR: ${{ github.workspace }}/vcpkg/installed

    strategy:
      matrix:
        os: ['windows-2019', 'ubuntu-20.04']
        include:
          - os: 'windows-2019'
            triplet: x64-windows
            mono: ''
          - os: 'ubuntu-20.04'
            triplet: 'x64-linux'
            # To run `nuget.exe` on non-Windows platforms, we must use `mono`.
            mono: 'mono'

    steps:
      - name: Checkout actions
        uses: actions/checkout@v2
        with:
          submodules: true

      - uses: lukka/get-cmake@latest

      - name: download and install msmpi 10.0
        if: matrix.os == 'windows-2019'
        shell: cmd
        run: |
          ${{ env.BUILD_COMMANDS_ROOT }}\download_mswin_10.bat

      - name: bootstrap vcpkg (ubuntu)
        if: matrix.os == 'ubuntu-20.04'
        run: |
          mkdir -p "${{ env.VCPKG_DEFAULT_BINARY_CACHE }}"
          ./vcpkg/bootstrap-vcpkg.sh

      - name: Install mono (ubuntu)
        if: matrix.os == 'ubuntu-20.04'
        run: |
          sudo apt install -y mono-complete

      - name: bootstrap vcpkg (windows)
        if: matrix.os == 'windows-2019'
        run: |
          mkdir -p "${{ env.VCPKG_DEFAULT_BINARY_CACHE }}"
          ./vcpkg/bootstrap-vcpkg.bat

      # This step assumes `vcpkg` has been bootstrapped (run `./vcpkg/bootstrap-vcpkg`)
      - name: 'Setup NuGet Credentials'
        shell: 'bash'
        # Replace <OWNER> with your organization name
        run: >
          ${{ matrix.mono }} `vcpkg/vcpkg fetch nuget | tail -n 1`
          sources add
          -source "https://nuget.pkg.github.com/arcaneframework/index.json"
          -storepasswordincleartext
          -name "GitHub"
          -username "arcaneframework"
          -password "${{ secrets.GITHUB_TOKEN }}"

      - name: 'Create package for vcpkg bootstrap'
        shell: 'bash'
        continue-on-error: true
        run: |
          cd ${{ github.workspace }}/vcpkg && tar ${{ env.BUILD_COMMANDS_ROOT }}/vcpkg_cache/vcpkg_cache.tar --exclude "downloads" --exclude "packages" 
          cd ${{ env.BUILD_COMMANDS_ROOT }}/vcpkg_cache && ${{ matrix.mono }} nuget.exe pack VcpkgCache
          cd ${{ env.BUILD_COMMANDS_ROOT }}/vcpkg_cache && ${{ matrix.mono }} nuget.exe push -Source GitHub VcpkgCache.1.0.0.nupkg

      - uses: actions/download-artifact@v2
        continue-on-error: true
        with:
          name: vcpkg-packages-${{ matrix.os }}
          path: ${{ env.MY_VCPKG_INSTALLED_DIR }}

      # Omit this step if you're using manifests
      - name: 'vcpkg package restore'
        shell: 'bash'
        run: >
          vcpkg/vcpkg --debug install sqlite3 --triplet ${{ matrix.triplet }}

#          vcpkg/vcpkg --debug install sqlite3 glib libxml2 mpi parmetis hypre --triplet ${{ matrix.triplet }}

      - uses: actions/upload-artifact@v2
        with:
          name: vcpkg-packages-${{ matrix.os }}
          path: ${{ env.MY_VCPKG_INSTALLED_DIR }}