name: putnuget
on:
  workflow_dispatch:

jobs:
  job:
    runs-on: ${{ matrix.os }}
  
    name: ${{ matrix.os }}-test-ci
  
    env:
      VCPKG_BINARY_SOURCES: 'clear;nuget,github,readwrite'
      BUILD_COMMANDS_ROOT: ${{ github.workspace }}/_build
      VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/builddir/vcpkg_archives
      MY_VCPKG_INSTALLED_DIR: ${{ github.workspace }}/vcpkg/installed
      VCPKG_DISABLE_METRICS: 1
      VCPKG_BUILD_DIR: '${{ github.workspace }}/vcpkg'
      VCPKG_PUSH_HASH_PACKAGE_NAME: '1.0.8-${{ matrix.os }}-${{ matrix.triplet }}'
      VCPKG_INSTALL_HASH_PACKAGE_NAME: '1.0.7-${{ matrix.os }}-${{ matrix.triplet }}'
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true
      DOTNET_VERSION: '3.1.x'

    strategy:
      matrix:
        os: ['windows-2019', 'ubuntu-20.04']
        include:
          - os: 'windows-2019'
            triplet: x64-windows
            nugetexe: nuget.exe
            mono: ''
          - os: 'ubuntu-20.04'
            triplet: 'x64-linux'
            nugetexe: /usr/local/bin/nuget.exe
            # To run `nuget.exe` on non-Windows platforms, we must use `mono`.
            mono: 'mono'

    steps:
#      - name: Cleanup repo
#        shell: 'bash'
#        run: |
#          mkdir -p "${{ github.workspace }}"
#          rm -rf "${{ github.workspace }}"/*

      - name: Checkout actions
        uses: actions/checkout@v2
        with:
          submodules: true

      - uses: lukka/get-cmake@latest

      - name: Setup environment
        shell: 'bash'
        run: |
          cmake -DNUGET_PASSWORD="${{ secrets.GITHUB_TOKEN }}" -P '${{ env.BUILD_COMMANDS_ROOT }}/Setup.cmake'

      - name: 'Untar vcpkg bootstrap cache'
        shell: 'bash'
        continue-on-error: true
        run: |
          cmake -DHASH_PACKAGE_NAME="${{ env.VCPKG_INSTALL_HASH_PACKAGE_NAME }}" -DVCPKG_BUILD_DIR='${{ env.VCPKG_BUILD_DIR }}' -P '${{ env.BUILD_COMMANDS_ROOT }}/vcpkg_cache/DoUntar.cmake'
          ls -lart '${{ env.VCPKG_BUILD_DIR }}'
          ls -lart '${{ env.VCPKG_BUILD_DIR }}'/VcpkgCache*
          ls -lart '${{ env.BUILD_COMMANDS_ROOT }}/vcpkg_cache'

      - name: bootstrap vcpkg
        run: |
          mkdir -p "${{ env.VCPKG_DEFAULT_BINARY_CACHE }}"
          cmake -DVCPKG_BUILD_DIR='${{ env.VCPKG_BUILD_DIR }}' -P '${{ env.BUILD_COMMANDS_ROOT }}/BootstrapVcpkg.cmake'

      - name: 'vcpkg package restore'
        shell: 'bash'
        run: >
          vcpkg/vcpkg --debug install glib libxml2 mpi parmetis hypre hdf5 hwloc lz4 tbb gtest --triplet ${{ matrix.triplet }}

      - name: 'Create nuget package for vcpkg installed packages'
        shell: 'bash'
        continue-on-error: true
        run: |
          cmake -DHASH_PACKAGE_NAME="${{ env.VCPKG_PUSH_HASH_PACKAGE_NAME }}" -DNUGET_API_KEY="${{ secrets.GITHUB_TOKEN }}" -DVCPKG_BUILD_DIR='${{ env.VCPKG_BUILD_DIR }}' -P '${{ env.BUILD_COMMANDS_ROOT }}/vcpkg_cache/DoTar.cmake'
          ls -lart '${{ env.VCPKG_BUILD_DIR }}'
          du -sh '${{ env.VCPKG_BUILD_DIR }}'
          ls -lart '${{ env.BUILD_COMMANDS_ROOT }}/vcpkg_cache'
