name: ci2
on:
  workflow_dispatch:
    inputs:
      # Nom de la branche de 'framework' qu'on va utiliser pour le workflow
      framework_branch:
        description: 'Framework Branch'
        required: true
        default: 'dev/cea'

jobs:
  job:
    name: ${{ matrix.os }}-ci2
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['windows-2019', ubuntu-20.04]
        include:
          - os: ubuntu-20.04
            triplet: x64-linux
          - os: 'windows-2019'
            triplet: x64-windows

    env:
      # Indicates the CMake build directory where project files and binaries are being produced.
      CMAKE_BUILD_DIR: ${{ github.workspace }}/builddir/
      # Indicates the location of the vcpkg as a Git submodule of the project repository.
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
      VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/builddir/vcpkg_archives
      BUILD_COMMANDS_ROOT: ${{ github.workspace }}/_build
      VCPKG_BUILD_DIR: '${{ github.workspace }}/vcpkg'
      VCPKG_INSTALL_HASH_PACKAGE_NAME: '1.0.7-${{ matrix.os }}-${{ matrix.triplet }}'
      CMAKE_COMMON_ARGS: -DCONFIG_BUILD_DIR="${{ github.workspace }}/builddir/" -DGIT_WORKSPACE=${{ github.workspace }} -P ${{ github.workspace }}/_build/Build.cmake
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true

    steps:
      - name: Checkout actions
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Checkout arcane
        uses: actions/checkout@v2
        with:
          repository: ${{ github.repository_owner }}/framework
          path: framework
          token: ${{ secrets.ArcaneFrameworkCI }}
          ref: ${{ github.event.inputs.framework_branch }}
          submodules: true

      - name: Setup environment
        shell: 'bash'
        run: |
          cmake -DNUGET_PASSWORD="${{ secrets.GITHUB_TOKEN }}" -P '${{ env.BUILD_COMMANDS_ROOT }}/Setup.cmake'
      
      - uses: lukka/get-cmake@latest

      - name: 'Untar vcpkg bootstrap cache'
        shell: 'bash'
        run: |
          cmake -DHASH_PACKAGE_NAME="${{ env.VCPKG_INSTALL_HASH_PACKAGE_NAME }}" -DVCPKG_BUILD_DIR='${{ env.VCPKG_BUILD_DIR }}' -P '${{ env.BUILD_COMMANDS_ROOT }}/vcpkg_cache/DoUntar.cmake'
          ls -lart '${{ env.VCPKG_BUILD_DIR }}'

      - name: Show content of workspace after cache has been restored
        run: find $RUNNER_WORKSPACE
        shell: bash

      - uses: ilammy/msvc-dev-cmd@v1

      - name: Configure build script
        run: |
          mkdir -p "${{ env.VCPKG_DEFAULT_BINARY_CACHE }}"
          cmake -S "${{ env.BUILD_COMMANDS_ROOT }}" -B "${{ env.CMAKE_BUILD_DIR }}/framework" -DCMAKE_VERBOSE_MAKEFILE=TRUE -DFRAMEWORK_DIR=${{ github.workspace }}/framework -DBUILD_WITH_VCPKG=TRUE -DCONFIG_WANTED=Debug -DVCPKG_INSTALLED_DIR="${{ env.VCPKG_BUILD_DIR }}/installed" -DVCPKG_NO_MANIFEST=TRUE

      - name: Build and install arccore
        run: |
          cmake --build "${{ env.CMAKE_BUILD_DIR }}/framework" --target build_arccore

      - name: Build and install axlstar
        run: |
          cmake --build "${{ env.CMAKE_BUILD_DIR }}/framework" --target build_axlstar

      - name: Configure arcane
        run: |
          cmake --build "${{ env.CMAKE_BUILD_DIR }}/framework" --target configure_arcane

      - name: Build arcane
        run: |
          cmake --build "${{ env.CMAKE_BUILD_DIR }}/framework" --target build_arcane
