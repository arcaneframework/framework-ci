name: ci
on:
  workflow_dispatch:

jobs:
  job:
    name: ${{ matrix.os }}-ci
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        include:
          - os: ubuntu-latest
            triplet: x64-linux

    env:
      # Indicates the CMake build directory where project files and binaries are being produced.
      CMAKE_BUILD_DIR: ${{ github.workspace }}/builddir/
      # Indicates the location of the vcpkg as a Git submodule of the project repository.
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
      VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/builddir/vcpkg_archives
      BUILD_COMMANDS_ROOT: ${{ github.workspace }}/_build
      CMAKE_COMMON_ARGS: -DCONFIG_BUILD_DIR="${{ github.workspace }}/builddir/" -DGIT_WORKSPACE=${{ github.workspace }} -P ${{ github.workspace }}/_build/Build.cmake

    steps:
      - name: Checkout actions
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Checkout arcane
        uses: actions/checkout@v2
        with:
          repository: ${{ github.repository_owner }}/framework
          path: framework
          token: ${{ secrets.ArcaneFrameworkCI }}
          ref: dev/cea
          submodules: true

      - name: download and install msmpi 10.0
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: |
          ${{ env.BUILD_COMMANDS_ROOT }}\download_mswin_10.bat
      
      - uses: lukka/get-cmake@latest

      - name: Restore vcpkg binaries
        uses: actions/cache@v2
        with:
          path: "${{ env.VCPKG_DEFAULT_BINARY_CACHE }}"
          key: ${{ matrix.triplet }}-vpckg-binaries-v2-${{ hashFiles( '.git/modules/vcpkg/HEAD' )}}-${{ hashFiles( '**/vcpkg.json' ) }}
          restore-keys:
            ${{ matrix.triplet }}-vpckg-binaries-v2-${{ hashFiles( '.git/modules/vcpkg/HEAD' )}}
            ${{ matrix.triplet }}-vpckg-binaries-v2
            ${{ matrix.triplet }}

      - name: Restore vcpkg and its artifacts.
        uses: actions/cache@v2
        with:
          path: |
            ${{ env.CMAKE_BUILD_DIR }}/vcpkg/vcpkg_installed/
            ${{ env.VCPKG_ROOT }}
            !${{ env.VCPKG_ROOT }}/buildtrees
            !${{ env.VCPKG_ROOT }}/packages
            !${{ env.VCPKG_ROOT }}/downloads
          key: |
            ${{ hashFiles( '**/vcpkg.json' ) }}-${{ hashFiles( '.git/modules/vcpkg/HEAD' )}}-${{ matrix.triplet }}-invalidate
      - name: Show content of workspace after cache has been restored
        run: find $RUNNER_WORKSPACE
        shell: bash
      - uses: ilammy/msvc-dev-cmd@v1
#      - name: Install dependencies and generate project files
#        shell: bash
#        run: |
#          mkdir -p "${{ env.VCPKG_DEFAULT_BINARY_CACHE }}"
#          cmake -S "${{ github.workspace }}/vcpkg_manifest" -B "${{ env.CMAKE_BUILD_DIR }}/vcpkg" -GNinja -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake"
#
      - name: Configure build script
        run: |
          mkdir -p "${{ env.VCPKG_DEFAULT_BINARY_CACHE }}"
          cmake -S "${{ env.BUILD_COMMANDS_ROOT }}" -B "${{ env.CMAKE_BUILD_DIR }}/framework" -DCMAKE_VERBOSE_MAKEFILE=TRUE -DFRAMEWORK_DIR=${{ github.workspace }}/framework -DBUILD_WITH_VCPKG=TRUE -DCONFIG_WANTED=Debug

      - name: Build and install arccore
        run: |
          cmake --build "${{ env.CMAKE_BUILD_DIR }}/framework" --target build_arccore

      - name: Build and install axlstar
        run: |
          cmake --build "${{ env.CMAKE_BUILD_DIR }}/framework" --target build_axlstar

      - name: Configure arcane
        run: |
          cmake --build "${{ env.CMAKE_BUILD_DIR }}/framework" --target configure_arcane

      - name: Build arcane
        run: |
          cmake --build "${{ env.CMAKE_BUILD_DIR }}/framework" --target build_arcane
